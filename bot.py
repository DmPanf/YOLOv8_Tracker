from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from io import BytesIO
import cv2
import os
import numpy as np
import torch
import random
from ultralytics import YOLO
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.environ.get("TOKEN")
# —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞ OMP
# os.environ['KMP_DUPLICATE_LIB_OK']='True'

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = YOLO('yolov8n.pt')
imgsz = 640

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
colors = [[random.randint(0, 255) for _ in range(3)] for _ in range(1000)]

async def start(update, context):
    await update.message.reply_text('ü™¨ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ª—é–¥–µ–π!')

def plot_one_box(x, img, color=None, label=None, line_thickness=None):
    # Plots one bounding box on image img
    tl = line_thickness or round(0.002 * (img.shape[0] + img.shape[1]) / 2) + 1  # line/font thickness
    color = color or [random.randint(0, 255) for _ in range(3)]
    c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))
    cv2.rectangle(img, c1, c2, color, thickness=tl)
    if label:
        tf = max(tl - 1, 1)  # font thickness
        t_size = cv2.getTextSize(label, 0, fontScale=tl / 3, thickness=tf)[0]
        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3
        cv2.rectangle(img, c1, c2, color, -1)  # filled
        cv2.putText(img, label, (c1[0], c1[1] - 2), 0, tl / 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)

def detect_object(img):
    pred = model(img)[0]
    pred = non_max_suppression(pred)
    for i, det in enumerate(pred):
        if len(det):
            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], img.shape).round()
    return pred

# —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
async def tracking(update, context):
    video_file = await context.bot.get_file(update.message.video.file_id)

    delete_message = await update.message.reply_text('–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –ò–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...')

    file_path = "temp_video_file.mp4"
    video_file.download(custom_path=file_path)

    video = cv2.VideoCapture(file_path)

    while True:
        ret, frame = video.read()
        if not ret:
            break

        img = letterbox(frame, imgsz)[0]
        img = img.transpose(2, 0, 1)
        img = torch.from_numpy(img).to(device)
        img = img.float()
        img /= 255.0

        if img.ndimension() == 3:
            img = img.unsqueeze(0)
        detections = detect_object(img)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π
        for i, det in enumerate(detections): 
            if len(det):  
                for *xyxy, conf, cls in reversed(det):
                    label = f'{conf:.2f}'
                    plot_one_box(xyxy, frame, label=label, color=colors[int(cls) % len(colors)], line_thickness=3)
        cv2.imshow('frame',frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):  # –ù–∞–∂–º–∏—Ç–µ q –¥–ª—è –≤—ã—Ö–æ–¥–∞
            break
    video.release()

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    await context.bot.delete_message(message_id = delete_message.message_id,
                                    chat_id = update.message.chat_id)
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await update.message.reply_text('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    # –ó–¥–µ—Å—å –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ
    # await update.message.reply_video(video)

def main():  # —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ .write_timeout(30)
    application = Application.builder().token(TOKEN).read_timeout(100).build()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.VIDEO, tracking))
    application.run_polling()

if __name__ == "__main__":
    main()
